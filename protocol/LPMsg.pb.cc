// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LPMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LPMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace LPMsg {

namespace {

const ::google::protobuf::Descriptor* GUID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GUID_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckRegister_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckRegister_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestString_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestString_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLogin_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LPMsg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_LPMsg_2eproto() {
  protobuf_AddDesc_LPMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LPMsg.proto");
  GOOGLE_CHECK(file != NULL);
  GUID_descriptor_ = file->message_type(0);
  static const int GUID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUID, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUID, data_),
  };
  GUID_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GUID_descriptor_,
      GUID::default_instance_,
      GUID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUID, _has_bits_[0]),
      -1,
      -1,
      sizeof(GUID),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GUID, _internal_metadata_),
      -1);
  ReqRegister_descriptor_ = file->message_type(1);
  static const int ReqRegister_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, message_),
  };
  ReqRegister_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqRegister_descriptor_,
      ReqRegister::default_instance_,
      ReqRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqRegister),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqRegister, _internal_metadata_),
      -1);
  AckRegister_descriptor_ = file->message_type(2);
  static const int AckRegister_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRegister, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRegister, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRegister, message_),
  };
  AckRegister_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckRegister_descriptor_,
      AckRegister::default_instance_,
      AckRegister_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRegister, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckRegister),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckRegister, _internal_metadata_),
      -1);
  TestString_descriptor_ = file->message_type(3);
  static const int TestString_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestString, str_value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestString, num_value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestString, num_value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestString, num_value3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestString, str_value2_),
  };
  TestString_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestString_descriptor_,
      TestString::default_instance_,
      TestString_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestString, _has_bits_[0]),
      -1,
      -1,
      sizeof(TestString),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestString, _internal_metadata_),
      -1);
  ReqLogin_descriptor_ = file->message_type(4);
  static const int ReqLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, password_),
  };
  ReqLogin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReqLogin_descriptor_,
      ReqLogin::default_instance_,
      ReqLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, _has_bits_[0]),
      -1,
      -1,
      sizeof(ReqLogin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, _internal_metadata_),
      -1);
  AckLogin_descriptor_ = file->message_type(5);
  static const int AckLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogin, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogin, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogin, message_),
  };
  AckLogin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AckLogin_descriptor_,
      AckLogin::default_instance_,
      AckLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogin, _has_bits_[0]),
      -1,
      -1,
      sizeof(AckLogin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLogin, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LPMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GUID_descriptor_, &GUID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqRegister_descriptor_, &ReqRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckRegister_descriptor_, &AckRegister::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestString_descriptor_, &TestString::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReqLogin_descriptor_, &ReqLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AckLogin_descriptor_, &AckLogin::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LPMsg_2eproto() {
  delete GUID::default_instance_;
  delete GUID_reflection_;
  delete ReqRegister::default_instance_;
  delete ReqRegister_reflection_;
  delete AckRegister::default_instance_;
  delete AckRegister_reflection_;
  delete TestString::default_instance_;
  delete TestString_reflection_;
  delete ReqLogin::default_instance_;
  delete ReqLogin_reflection_;
  delete AckLogin::default_instance_;
  delete AckLogin_reflection_;
}

void protobuf_AddDesc_LPMsg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_LPMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013LPMsg.proto\022\005LPMsg\"\"\n\004GUID\022\014\n\004head\030\001 \002"
    "(\014\022\014\n\004data\030\002 \002(\014\"F\n\013ReqRegister\022\021\n\tserve"
    "r_id\030\001 \002(\005\022\023\n\013server_name\030\002 \002(\t\022\017\n\007messa"
    "ge\030\003 \002(\t\"F\n\013AckRegister\022\021\n\tserver_id\030\001 \002"
    "(\005\022\023\n\013server_name\030\002 \002(\t\022\017\n\007message\030\003 \002(\t"
    "\"p\n\nTestString\022\022\n\nstr_value1\030\001 \002(\t\022\022\n\nnu"
    "m_value1\030\002 \002(\005\022\022\n\nnum_value2\030\003 \002(\005\022\022\n\nnu"
    "m_value3\030\004 \002(\005\022\022\n\nstr_value2\030\005 \002(\t\"-\n\010Re"
    "qLogin\022\017\n\007account\030\001 \002(\t\022\020\n\010password\030\002 \002("
    "\t\"@\n\010AckLogin\022\017\n\007account\030\001 \002(\t\022\022\n\nerror_"
    "code\030\002 \002(\005\022\017\n\007message\030\003 \002(\t", 427);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LPMsg.proto", &protobuf_RegisterTypes);
  GUID::default_instance_ = new GUID();
  ReqRegister::default_instance_ = new ReqRegister();
  AckRegister::default_instance_ = new AckRegister();
  TestString::default_instance_ = new TestString();
  ReqLogin::default_instance_ = new ReqLogin();
  AckLogin::default_instance_ = new AckLogin();
  GUID::default_instance_->InitAsDefaultInstance();
  ReqRegister::default_instance_->InitAsDefaultInstance();
  AckRegister::default_instance_->InitAsDefaultInstance();
  TestString::default_instance_->InitAsDefaultInstance();
  ReqLogin::default_instance_->InitAsDefaultInstance();
  AckLogin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LPMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LPMsg_2eproto {
  StaticDescriptorInitializer_LPMsg_2eproto() {
    protobuf_AddDesc_LPMsg_2eproto();
  }
} static_descriptor_initializer_LPMsg_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GUID::kHeadFieldNumber;
const int GUID::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GUID::GUID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LPMsg.GUID)
}

void GUID::InitAsDefaultInstance() {
}

GUID::GUID(const GUID& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LPMsg.GUID)
}

void GUID::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  head_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GUID::~GUID() {
  // @@protoc_insertion_point(destructor:LPMsg.GUID)
  SharedDtor();
}

void GUID::SharedDtor() {
  head_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GUID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GUID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GUID_descriptor_;
}

const GUID& GUID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LPMsg_2eproto();
  return *default_instance_;
}

GUID* GUID::default_instance_ = NULL;

GUID* GUID::New(::google::protobuf::Arena* arena) const {
  GUID* n = new GUID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GUID::Clear() {
// @@protoc_insertion_point(message_clear_start:LPMsg.GUID)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_head()) {
      head_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GUID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LPMsg.GUID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LPMsg.GUID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LPMsg.GUID)
  return false;
#undef DO_
}

void GUID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LPMsg.GUID)
  // required bytes head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->head(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LPMsg.GUID)
}

::google::protobuf::uint8* GUID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LPMsg.GUID)
  // required bytes head = 1;
  if (has_head()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->head(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LPMsg.GUID)
  return target;
}

int GUID::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LPMsg.GUID)
  int total_size = 0;

  if (has_head()) {
    // required bytes head = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->head());
  }

  if (has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  return total_size;
}
int GUID::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LPMsg.GUID)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes head = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->head());

    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GUID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LPMsg.GUID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GUID* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GUID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LPMsg.GUID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LPMsg.GUID)
    MergeFrom(*source);
  }
}

void GUID::MergeFrom(const GUID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LPMsg.GUID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      set_has_head();
      head_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.head_);
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GUID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LPMsg.GUID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GUID::CopyFrom(const GUID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LPMsg.GUID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GUID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GUID::Swap(GUID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GUID::InternalSwap(GUID* other) {
  head_.Swap(&other->head_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GUID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GUID_descriptor_;
  metadata.reflection = GUID_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GUID

// required bytes head = 1;
bool GUID::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GUID::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void GUID::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void GUID::clear_head() {
  head_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_head();
}
 const ::std::string& GUID::head() const {
  // @@protoc_insertion_point(field_get:LPMsg.GUID.head)
  return head_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GUID::set_head(const ::std::string& value) {
  set_has_head();
  head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.GUID.head)
}
 void GUID::set_head(const char* value) {
  set_has_head();
  head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.GUID.head)
}
 void GUID::set_head(const void* value, size_t size) {
  set_has_head();
  head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.GUID.head)
}
 ::std::string* GUID::mutable_head() {
  set_has_head();
  // @@protoc_insertion_point(field_mutable:LPMsg.GUID.head)
  return head_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GUID::release_head() {
  // @@protoc_insertion_point(field_release:LPMsg.GUID.head)
  clear_has_head();
  return head_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GUID::set_allocated_head(::std::string* head) {
  if (head != NULL) {
    set_has_head();
  } else {
    clear_has_head();
  }
  head_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), head);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.GUID.head)
}

// required bytes data = 2;
bool GUID::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GUID::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void GUID::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void GUID::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& GUID::data() const {
  // @@protoc_insertion_point(field_get:LPMsg.GUID.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GUID::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.GUID.data)
}
 void GUID::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.GUID.data)
}
 void GUID::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.GUID.data)
}
 ::std::string* GUID::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:LPMsg.GUID.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GUID::release_data() {
  // @@protoc_insertion_point(field_release:LPMsg.GUID.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GUID::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.GUID.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqRegister::kServerIdFieldNumber;
const int ReqRegister::kServerNameFieldNumber;
const int ReqRegister::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqRegister::ReqRegister()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LPMsg.ReqRegister)
}

void ReqRegister::InitAsDefaultInstance() {
}

ReqRegister::ReqRegister(const ReqRegister& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LPMsg.ReqRegister)
}

void ReqRegister::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_id_ = 0;
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqRegister::~ReqRegister() {
  // @@protoc_insertion_point(destructor:LPMsg.ReqRegister)
  SharedDtor();
}

void ReqRegister::SharedDtor() {
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReqRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqRegister_descriptor_;
}

const ReqRegister& ReqRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LPMsg_2eproto();
  return *default_instance_;
}

ReqRegister* ReqRegister::default_instance_ = NULL;

ReqRegister* ReqRegister::New(::google::protobuf::Arena* arena) const {
  ReqRegister* n = new ReqRegister;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:LPMsg.ReqRegister)
  if (_has_bits_[0 / 32] & 7u) {
    server_id_ = 0;
    if (has_server_name()) {
      server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LPMsg.ReqRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }

      // required string server_name = 2;
      case 2: {
        if (tag == 18) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LPMsg.ReqRegister.server_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // required string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LPMsg.ReqRegister.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LPMsg.ReqRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LPMsg.ReqRegister)
  return false;
#undef DO_
}

void ReqRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LPMsg.ReqRegister)
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // required string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.ReqRegister.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_name(), output);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.ReqRegister.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LPMsg.ReqRegister)
}

::google::protobuf::uint8* ReqRegister::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LPMsg.ReqRegister)
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // required string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.ReqRegister.server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.ReqRegister.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LPMsg.ReqRegister)
  return target;
}

int ReqRegister::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LPMsg.ReqRegister)
  int total_size = 0;

  if (has_server_id()) {
    // required int32 server_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  if (has_server_name()) {
    // required string server_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  if (has_message()) {
    // required string message = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  return total_size;
}
int ReqRegister::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LPMsg.ReqRegister)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 server_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_id());

    // required string server_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());

    // required string message = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqRegister::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LPMsg.ReqRegister)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqRegister* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqRegister>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LPMsg.ReqRegister)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LPMsg.ReqRegister)
    MergeFrom(*source);
  }
}

void ReqRegister::MergeFrom(const ReqRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LPMsg.ReqRegister)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_name()) {
      set_has_server_name();
      server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqRegister::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LPMsg.ReqRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqRegister::CopyFrom(const ReqRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LPMsg.ReqRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqRegister::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqRegister::Swap(ReqRegister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqRegister::InternalSwap(ReqRegister* other) {
  std::swap(server_id_, other->server_id_);
  server_name_.Swap(&other->server_name_);
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqRegister_descriptor_;
  metadata.reflection = ReqRegister_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqRegister

// required int32 server_id = 1;
bool ReqRegister::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqRegister::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqRegister::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqRegister::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
 ::google::protobuf::int32 ReqRegister::server_id() const {
  // @@protoc_insertion_point(field_get:LPMsg.ReqRegister.server_id)
  return server_id_;
}
 void ReqRegister::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:LPMsg.ReqRegister.server_id)
}

// required string server_name = 2;
bool ReqRegister::has_server_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqRegister::set_has_server_name() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqRegister::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqRegister::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_name();
}
 const ::std::string& ReqRegister::server_name() const {
  // @@protoc_insertion_point(field_get:LPMsg.ReqRegister.server_name)
  return server_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqRegister::set_server_name(const ::std::string& value) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.ReqRegister.server_name)
}
 void ReqRegister::set_server_name(const char* value) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.ReqRegister.server_name)
}
 void ReqRegister::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.ReqRegister.server_name)
}
 ::std::string* ReqRegister::mutable_server_name() {
  set_has_server_name();
  // @@protoc_insertion_point(field_mutable:LPMsg.ReqRegister.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqRegister::release_server_name() {
  // @@protoc_insertion_point(field_release:LPMsg.ReqRegister.server_name)
  clear_has_server_name();
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqRegister::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    set_has_server_name();
  } else {
    clear_has_server_name();
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.ReqRegister.server_name)
}

// required string message = 3;
bool ReqRegister::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReqRegister::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
void ReqRegister::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReqRegister::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& ReqRegister::message() const {
  // @@protoc_insertion_point(field_get:LPMsg.ReqRegister.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqRegister::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.ReqRegister.message)
}
 void ReqRegister::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.ReqRegister.message)
}
 void ReqRegister::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.ReqRegister.message)
}
 ::std::string* ReqRegister::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:LPMsg.ReqRegister.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqRegister::release_message() {
  // @@protoc_insertion_point(field_release:LPMsg.ReqRegister.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqRegister::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.ReqRegister.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckRegister::kServerIdFieldNumber;
const int AckRegister::kServerNameFieldNumber;
const int AckRegister::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckRegister::AckRegister()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LPMsg.AckRegister)
}

void AckRegister::InitAsDefaultInstance() {
}

AckRegister::AckRegister(const AckRegister& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LPMsg.AckRegister)
}

void AckRegister::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  server_id_ = 0;
  server_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckRegister::~AckRegister() {
  // @@protoc_insertion_point(destructor:LPMsg.AckRegister)
  SharedDtor();
}

void AckRegister::SharedDtor() {
  server_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AckRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckRegister::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckRegister_descriptor_;
}

const AckRegister& AckRegister::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LPMsg_2eproto();
  return *default_instance_;
}

AckRegister* AckRegister::default_instance_ = NULL;

AckRegister* AckRegister::New(::google::protobuf::Arena* arena) const {
  AckRegister* n = new AckRegister;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:LPMsg.AckRegister)
  if (_has_bits_[0 / 32] & 7u) {
    server_id_ = 0;
    if (has_server_name()) {
      server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LPMsg.AckRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_server_name;
        break;
      }

      // required string server_name = 2;
      case 2: {
        if (tag == 18) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LPMsg.AckRegister.server_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // required string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LPMsg.AckRegister.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LPMsg.AckRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LPMsg.AckRegister)
  return false;
#undef DO_
}

void AckRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LPMsg.AckRegister)
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  // required string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.AckRegister.server_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->server_name(), output);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.AckRegister.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LPMsg.AckRegister)
}

::google::protobuf::uint8* AckRegister::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LPMsg.AckRegister)
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  // required string server_name = 2;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.AckRegister.server_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_name(), target);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.AckRegister.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LPMsg.AckRegister)
  return target;
}

int AckRegister::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LPMsg.AckRegister)
  int total_size = 0;

  if (has_server_id()) {
    // required int32 server_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_id());
  }

  if (has_server_name()) {
    // required string server_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());
  }

  if (has_message()) {
    // required string message = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  return total_size;
}
int AckRegister::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LPMsg.AckRegister)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 server_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->server_id());

    // required string server_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_name());

    // required string message = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckRegister::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LPMsg.AckRegister)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckRegister* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckRegister>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LPMsg.AckRegister)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LPMsg.AckRegister)
    MergeFrom(*source);
  }
}

void AckRegister::MergeFrom(const AckRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LPMsg.AckRegister)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_name()) {
      set_has_server_name();
      server_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_name_);
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckRegister::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LPMsg.AckRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckRegister::CopyFrom(const AckRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LPMsg.AckRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckRegister::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AckRegister::Swap(AckRegister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckRegister::InternalSwap(AckRegister* other) {
  std::swap(server_id_, other->server_id_);
  server_name_.Swap(&other->server_name_);
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckRegister::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckRegister_descriptor_;
  metadata.reflection = AckRegister_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckRegister

// required int32 server_id = 1;
bool AckRegister::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AckRegister::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
void AckRegister::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void AckRegister::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
 ::google::protobuf::int32 AckRegister::server_id() const {
  // @@protoc_insertion_point(field_get:LPMsg.AckRegister.server_id)
  return server_id_;
}
 void AckRegister::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:LPMsg.AckRegister.server_id)
}

// required string server_name = 2;
bool AckRegister::has_server_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AckRegister::set_has_server_name() {
  _has_bits_[0] |= 0x00000002u;
}
void AckRegister::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void AckRegister::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_name();
}
 const ::std::string& AckRegister::server_name() const {
  // @@protoc_insertion_point(field_get:LPMsg.AckRegister.server_name)
  return server_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AckRegister::set_server_name(const ::std::string& value) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.AckRegister.server_name)
}
 void AckRegister::set_server_name(const char* value) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.AckRegister.server_name)
}
 void AckRegister::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.AckRegister.server_name)
}
 ::std::string* AckRegister::mutable_server_name() {
  set_has_server_name();
  // @@protoc_insertion_point(field_mutable:LPMsg.AckRegister.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AckRegister::release_server_name() {
  // @@protoc_insertion_point(field_release:LPMsg.AckRegister.server_name)
  clear_has_server_name();
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AckRegister::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    set_has_server_name();
  } else {
    clear_has_server_name();
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.AckRegister.server_name)
}

// required string message = 3;
bool AckRegister::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AckRegister::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
void AckRegister::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
void AckRegister::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& AckRegister::message() const {
  // @@protoc_insertion_point(field_get:LPMsg.AckRegister.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AckRegister::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.AckRegister.message)
}
 void AckRegister::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.AckRegister.message)
}
 void AckRegister::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.AckRegister.message)
}
 ::std::string* AckRegister::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:LPMsg.AckRegister.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AckRegister::release_message() {
  // @@protoc_insertion_point(field_release:LPMsg.AckRegister.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AckRegister::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.AckRegister.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestString::kStrValue1FieldNumber;
const int TestString::kNumValue1FieldNumber;
const int TestString::kNumValue2FieldNumber;
const int TestString::kNumValue3FieldNumber;
const int TestString::kStrValue2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestString::TestString()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LPMsg.TestString)
}

void TestString::InitAsDefaultInstance() {
}

TestString::TestString(const TestString& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LPMsg.TestString)
}

void TestString::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  str_value1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_value1_ = 0;
  num_value2_ = 0;
  num_value3_ = 0;
  str_value2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestString::~TestString() {
  // @@protoc_insertion_point(destructor:LPMsg.TestString)
  SharedDtor();
}

void TestString::SharedDtor() {
  str_value1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  str_value2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TestString::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestString::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestString_descriptor_;
}

const TestString& TestString::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LPMsg_2eproto();
  return *default_instance_;
}

TestString* TestString::default_instance_ = NULL;

TestString* TestString::New(::google::protobuf::Arena* arena) const {
  TestString* n = new TestString;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestString::Clear() {
// @@protoc_insertion_point(message_clear_start:LPMsg.TestString)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TestString, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TestString*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(num_value1_, num_value2_);
    if (has_str_value1()) {
      str_value1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    num_value3_ = 0;
    if (has_str_value2()) {
      str_value2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TestString::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LPMsg.TestString)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string str_value1 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_value1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str_value1().data(), this->str_value1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LPMsg.TestString.str_value1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num_value1;
        break;
      }

      // required int32 num_value1 = 2;
      case 2: {
        if (tag == 16) {
         parse_num_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_value1_)));
          set_has_num_value1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num_value2;
        break;
      }

      // required int32 num_value2 = 3;
      case 3: {
        if (tag == 24) {
         parse_num_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_value2_)));
          set_has_num_value2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_num_value3;
        break;
      }

      // required int32 num_value3 = 4;
      case 4: {
        if (tag == 32) {
         parse_num_value3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_value3_)));
          set_has_num_value3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_str_value2;
        break;
      }

      // required string str_value2 = 5;
      case 5: {
        if (tag == 42) {
         parse_str_value2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_value2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->str_value2().data(), this->str_value2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LPMsg.TestString.str_value2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LPMsg.TestString)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LPMsg.TestString)
  return false;
#undef DO_
}

void TestString::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LPMsg.TestString)
  // required string str_value1 = 1;
  if (has_str_value1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_value1().data(), this->str_value1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.TestString.str_value1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->str_value1(), output);
  }

  // required int32 num_value1 = 2;
  if (has_num_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_value1(), output);
  }

  // required int32 num_value2 = 3;
  if (has_num_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num_value2(), output);
  }

  // required int32 num_value3 = 4;
  if (has_num_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_value3(), output);
  }

  // required string str_value2 = 5;
  if (has_str_value2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_value2().data(), this->str_value2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.TestString.str_value2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->str_value2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LPMsg.TestString)
}

::google::protobuf::uint8* TestString::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LPMsg.TestString)
  // required string str_value1 = 1;
  if (has_str_value1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_value1().data(), this->str_value1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.TestString.str_value1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str_value1(), target);
  }

  // required int32 num_value1 = 2;
  if (has_num_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_value1(), target);
  }

  // required int32 num_value2 = 3;
  if (has_num_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num_value2(), target);
  }

  // required int32 num_value3 = 4;
  if (has_num_value3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_value3(), target);
  }

  // required string str_value2 = 5;
  if (has_str_value2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->str_value2().data(), this->str_value2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.TestString.str_value2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->str_value2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LPMsg.TestString)
  return target;
}

int TestString::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LPMsg.TestString)
  int total_size = 0;

  if (has_str_value1()) {
    // required string str_value1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str_value1());
  }

  if (has_num_value1()) {
    // required int32 num_value1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_value1());
  }

  if (has_num_value2()) {
    // required int32 num_value2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_value2());
  }

  if (has_num_value3()) {
    // required int32 num_value3 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_value3());
  }

  if (has_str_value2()) {
    // required string str_value2 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str_value2());
  }

  return total_size;
}
int TestString::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LPMsg.TestString)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string str_value1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str_value1());

    // required int32 num_value1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_value1());

    // required int32 num_value2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_value2());

    // required int32 num_value3 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_value3());

    // required string str_value2 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->str_value2());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestString::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LPMsg.TestString)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TestString* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TestString>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LPMsg.TestString)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LPMsg.TestString)
    MergeFrom(*source);
  }
}

void TestString::MergeFrom(const TestString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LPMsg.TestString)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str_value1()) {
      set_has_str_value1();
      str_value1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_value1_);
    }
    if (from.has_num_value1()) {
      set_num_value1(from.num_value1());
    }
    if (from.has_num_value2()) {
      set_num_value2(from.num_value2());
    }
    if (from.has_num_value3()) {
      set_num_value3(from.num_value3());
    }
    if (from.has_str_value2()) {
      set_has_str_value2();
      str_value2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_value2_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TestString::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LPMsg.TestString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestString::CopyFrom(const TestString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LPMsg.TestString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestString::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void TestString::Swap(TestString* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestString::InternalSwap(TestString* other) {
  str_value1_.Swap(&other->str_value1_);
  std::swap(num_value1_, other->num_value1_);
  std::swap(num_value2_, other->num_value2_);
  std::swap(num_value3_, other->num_value3_);
  str_value2_.Swap(&other->str_value2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestString::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestString_descriptor_;
  metadata.reflection = TestString_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestString

// required string str_value1 = 1;
bool TestString::has_str_value1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TestString::set_has_str_value1() {
  _has_bits_[0] |= 0x00000001u;
}
void TestString::clear_has_str_value1() {
  _has_bits_[0] &= ~0x00000001u;
}
void TestString::clear_str_value1() {
  str_value1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str_value1();
}
 const ::std::string& TestString::str_value1() const {
  // @@protoc_insertion_point(field_get:LPMsg.TestString.str_value1)
  return str_value1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestString::set_str_value1(const ::std::string& value) {
  set_has_str_value1();
  str_value1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.TestString.str_value1)
}
 void TestString::set_str_value1(const char* value) {
  set_has_str_value1();
  str_value1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.TestString.str_value1)
}
 void TestString::set_str_value1(const char* value, size_t size) {
  set_has_str_value1();
  str_value1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.TestString.str_value1)
}
 ::std::string* TestString::mutable_str_value1() {
  set_has_str_value1();
  // @@protoc_insertion_point(field_mutable:LPMsg.TestString.str_value1)
  return str_value1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TestString::release_str_value1() {
  // @@protoc_insertion_point(field_release:LPMsg.TestString.str_value1)
  clear_has_str_value1();
  return str_value1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestString::set_allocated_str_value1(::std::string* str_value1) {
  if (str_value1 != NULL) {
    set_has_str_value1();
  } else {
    clear_has_str_value1();
  }
  str_value1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_value1);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.TestString.str_value1)
}

// required int32 num_value1 = 2;
bool TestString::has_num_value1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TestString::set_has_num_value1() {
  _has_bits_[0] |= 0x00000002u;
}
void TestString::clear_has_num_value1() {
  _has_bits_[0] &= ~0x00000002u;
}
void TestString::clear_num_value1() {
  num_value1_ = 0;
  clear_has_num_value1();
}
 ::google::protobuf::int32 TestString::num_value1() const {
  // @@protoc_insertion_point(field_get:LPMsg.TestString.num_value1)
  return num_value1_;
}
 void TestString::set_num_value1(::google::protobuf::int32 value) {
  set_has_num_value1();
  num_value1_ = value;
  // @@protoc_insertion_point(field_set:LPMsg.TestString.num_value1)
}

// required int32 num_value2 = 3;
bool TestString::has_num_value2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TestString::set_has_num_value2() {
  _has_bits_[0] |= 0x00000004u;
}
void TestString::clear_has_num_value2() {
  _has_bits_[0] &= ~0x00000004u;
}
void TestString::clear_num_value2() {
  num_value2_ = 0;
  clear_has_num_value2();
}
 ::google::protobuf::int32 TestString::num_value2() const {
  // @@protoc_insertion_point(field_get:LPMsg.TestString.num_value2)
  return num_value2_;
}
 void TestString::set_num_value2(::google::protobuf::int32 value) {
  set_has_num_value2();
  num_value2_ = value;
  // @@protoc_insertion_point(field_set:LPMsg.TestString.num_value2)
}

// required int32 num_value3 = 4;
bool TestString::has_num_value3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TestString::set_has_num_value3() {
  _has_bits_[0] |= 0x00000008u;
}
void TestString::clear_has_num_value3() {
  _has_bits_[0] &= ~0x00000008u;
}
void TestString::clear_num_value3() {
  num_value3_ = 0;
  clear_has_num_value3();
}
 ::google::protobuf::int32 TestString::num_value3() const {
  // @@protoc_insertion_point(field_get:LPMsg.TestString.num_value3)
  return num_value3_;
}
 void TestString::set_num_value3(::google::protobuf::int32 value) {
  set_has_num_value3();
  num_value3_ = value;
  // @@protoc_insertion_point(field_set:LPMsg.TestString.num_value3)
}

// required string str_value2 = 5;
bool TestString::has_str_value2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TestString::set_has_str_value2() {
  _has_bits_[0] |= 0x00000010u;
}
void TestString::clear_has_str_value2() {
  _has_bits_[0] &= ~0x00000010u;
}
void TestString::clear_str_value2() {
  str_value2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str_value2();
}
 const ::std::string& TestString::str_value2() const {
  // @@protoc_insertion_point(field_get:LPMsg.TestString.str_value2)
  return str_value2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestString::set_str_value2(const ::std::string& value) {
  set_has_str_value2();
  str_value2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.TestString.str_value2)
}
 void TestString::set_str_value2(const char* value) {
  set_has_str_value2();
  str_value2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.TestString.str_value2)
}
 void TestString::set_str_value2(const char* value, size_t size) {
  set_has_str_value2();
  str_value2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.TestString.str_value2)
}
 ::std::string* TestString::mutable_str_value2() {
  set_has_str_value2();
  // @@protoc_insertion_point(field_mutable:LPMsg.TestString.str_value2)
  return str_value2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TestString::release_str_value2() {
  // @@protoc_insertion_point(field_release:LPMsg.TestString.str_value2)
  clear_has_str_value2();
  return str_value2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TestString::set_allocated_str_value2(::std::string* str_value2) {
  if (str_value2 != NULL) {
    set_has_str_value2();
  } else {
    clear_has_str_value2();
  }
  str_value2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_value2);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.TestString.str_value2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqLogin::kAccountFieldNumber;
const int ReqLogin::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqLogin::ReqLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LPMsg.ReqLogin)
}

void ReqLogin::InitAsDefaultInstance() {
}

ReqLogin::ReqLogin(const ReqLogin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LPMsg.ReqLogin)
}

void ReqLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLogin::~ReqLogin() {
  // @@protoc_insertion_point(destructor:LPMsg.ReqLogin)
  SharedDtor();
}

void ReqLogin::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReqLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLogin_descriptor_;
}

const ReqLogin& ReqLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LPMsg_2eproto();
  return *default_instance_;
}

ReqLogin* ReqLogin::default_instance_ = NULL;

ReqLogin* ReqLogin::New(::google::protobuf::Arena* arena) const {
  ReqLogin* n = new ReqLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReqLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:LPMsg.ReqLogin)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_account()) {
      account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_password()) {
      password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ReqLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LPMsg.ReqLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LPMsg.ReqLogin.account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LPMsg.ReqLogin.password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LPMsg.ReqLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LPMsg.ReqLogin)
  return false;
#undef DO_
}

void ReqLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LPMsg.ReqLogin)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.ReqLogin.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.ReqLogin.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LPMsg.ReqLogin)
}

::google::protobuf::uint8* ReqLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LPMsg.ReqLogin)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.ReqLogin.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.ReqLogin.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LPMsg.ReqLogin)
  return target;
}

int ReqLogin::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LPMsg.ReqLogin)
  int total_size = 0;

  if (has_account()) {
    // required string account = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  if (has_password()) {
    // required string password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  return total_size;
}
int ReqLogin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LPMsg.ReqLogin)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string account = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());

    // required string password = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LPMsg.ReqLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReqLogin* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReqLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LPMsg.ReqLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LPMsg.ReqLogin)
    MergeFrom(*source);
  }
}

void ReqLogin::MergeFrom(const ReqLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LPMsg.ReqLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (from.has_password()) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ReqLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LPMsg.ReqLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogin::CopyFrom(const ReqLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LPMsg.ReqLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqLogin::Swap(ReqLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqLogin::InternalSwap(ReqLogin* other) {
  account_.Swap(&other->account_);
  password_.Swap(&other->password_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReqLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLogin_descriptor_;
  metadata.reflection = ReqLogin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReqLogin

// required string account = 1;
bool ReqLogin::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReqLogin::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
void ReqLogin::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReqLogin::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
 const ::std::string& ReqLogin::account() const {
  // @@protoc_insertion_point(field_get:LPMsg.ReqLogin.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqLogin::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.ReqLogin.account)
}
 void ReqLogin::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.ReqLogin.account)
}
 void ReqLogin::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.ReqLogin.account)
}
 ::std::string* ReqLogin::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:LPMsg.ReqLogin.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqLogin::release_account() {
  // @@protoc_insertion_point(field_release:LPMsg.ReqLogin.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqLogin::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.ReqLogin.account)
}

// required string password = 2;
bool ReqLogin::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReqLogin::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
void ReqLogin::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReqLogin::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
 const ::std::string& ReqLogin::password() const {
  // @@protoc_insertion_point(field_get:LPMsg.ReqLogin.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqLogin::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.ReqLogin.password)
}
 void ReqLogin::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.ReqLogin.password)
}
 void ReqLogin::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.ReqLogin.password)
}
 ::std::string* ReqLogin::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:LPMsg.ReqLogin.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReqLogin::release_password() {
  // @@protoc_insertion_point(field_release:LPMsg.ReqLogin.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReqLogin::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.ReqLogin.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AckLogin::kAccountFieldNumber;
const int AckLogin::kErrorCodeFieldNumber;
const int AckLogin::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AckLogin::AckLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LPMsg.AckLogin)
}

void AckLogin::InitAsDefaultInstance() {
}

AckLogin::AckLogin(const AckLogin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LPMsg.AckLogin)
}

void AckLogin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLogin::~AckLogin() {
  // @@protoc_insertion_point(destructor:LPMsg.AckLogin)
  SharedDtor();
}

void AckLogin::SharedDtor() {
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AckLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLogin_descriptor_;
}

const AckLogin& AckLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LPMsg_2eproto();
  return *default_instance_;
}

AckLogin* AckLogin::default_instance_ = NULL;

AckLogin* AckLogin::New(::google::protobuf::Arena* arena) const {
  AckLogin* n = new AckLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AckLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:LPMsg.AckLogin)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_account()) {
      account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    error_code_ = 0;
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AckLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LPMsg.AckLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LPMsg.AckLogin.account");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // required int32 error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }

      // required string message = 3;
      case 3: {
        if (tag == 26) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "LPMsg.AckLogin.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LPMsg.AckLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LPMsg.AckLogin)
  return false;
#undef DO_
}

void AckLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LPMsg.AckLogin)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.AckLogin.account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // required int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.AckLogin.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:LPMsg.AckLogin)
}

::google::protobuf::uint8* AckLogin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:LPMsg.AckLogin)
  // required string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.AckLogin.account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // required int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }

  // required string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "LPMsg.AckLogin.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LPMsg.AckLogin)
  return target;
}

int AckLogin::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:LPMsg.AckLogin)
  int total_size = 0;

  if (has_account()) {
    // required string account = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  if (has_error_code()) {
    // required int32 error_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  if (has_message()) {
    // required string message = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  return total_size;
}
int AckLogin::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:LPMsg.AckLogin)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string account = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());

    // required int32 error_code = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());

    // required string message = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLogin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LPMsg.AckLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AckLogin* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AckLogin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LPMsg.AckLogin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LPMsg.AckLogin)
    MergeFrom(*source);
  }
}

void AckLogin::MergeFrom(const AckLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LPMsg.AckLogin)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_has_account();
      account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AckLogin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LPMsg.AckLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLogin::CopyFrom(const AckLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LPMsg.AckLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AckLogin::Swap(AckLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AckLogin::InternalSwap(AckLogin* other) {
  account_.Swap(&other->account_);
  std::swap(error_code_, other->error_code_);
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AckLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLogin_descriptor_;
  metadata.reflection = AckLogin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AckLogin

// required string account = 1;
bool AckLogin::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AckLogin::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
void AckLogin::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
void AckLogin::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
 const ::std::string& AckLogin::account() const {
  // @@protoc_insertion_point(field_get:LPMsg.AckLogin.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AckLogin::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.AckLogin.account)
}
 void AckLogin::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.AckLogin.account)
}
 void AckLogin::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.AckLogin.account)
}
 ::std::string* AckLogin::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:LPMsg.AckLogin.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AckLogin::release_account() {
  // @@protoc_insertion_point(field_release:LPMsg.AckLogin.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AckLogin::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.AckLogin.account)
}

// required int32 error_code = 2;
bool AckLogin::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AckLogin::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
void AckLogin::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void AckLogin::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
 ::google::protobuf::int32 AckLogin::error_code() const {
  // @@protoc_insertion_point(field_get:LPMsg.AckLogin.error_code)
  return error_code_;
}
 void AckLogin::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:LPMsg.AckLogin.error_code)
}

// required string message = 3;
bool AckLogin::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AckLogin::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
void AckLogin::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
void AckLogin::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& AckLogin::message() const {
  // @@protoc_insertion_point(field_get:LPMsg.AckLogin.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AckLogin::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.AckLogin.message)
}
 void AckLogin::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.AckLogin.message)
}
 void AckLogin::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.AckLogin.message)
}
 ::std::string* AckLogin::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:LPMsg.AckLogin.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AckLogin::release_message() {
  // @@protoc_insertion_point(field_release:LPMsg.AckLogin.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AckLogin::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.AckLogin.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace LPMsg

// @@protoc_insertion_point(global_scope)
