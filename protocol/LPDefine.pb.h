// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LPDefine.proto

#ifndef PROTOBUF_LPDefine_2eproto__INCLUDED
#define PROTOBUF_LPDefine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace LPDefine {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_LPDefine_2eproto();
void protobuf_AssignDesc_LPDefine_2eproto();
void protobuf_ShutdownFile_LPDefine_2eproto();


enum e_MsgID {
  msg_begin = 1,
  msg_req_server_register = 1001,
  msg_ack_server_register = 1002,
  msg_req_client_login = 2001,
  msg_ack_client_login = 2002,
  msg_end = 65535
};
bool e_MsgID_IsValid(int value);
const e_MsgID e_MsgID_MIN = msg_begin;
const e_MsgID e_MsgID_MAX = msg_end;
const int e_MsgID_ARRAYSIZE = e_MsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_MsgID_descriptor();
inline const ::std::string& e_MsgID_Name(e_MsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_MsgID_descriptor(), value);
}
inline bool e_MsgID_Parse(
    const ::std::string& name, e_MsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_MsgID>(
    e_MsgID_descriptor(), name, value);
}
enum e_ResultCode {
  eRstUnknow = 0,
  eRstSuccess = 1
};
bool e_ResultCode_IsValid(int value);
const e_ResultCode e_ResultCode_MIN = eRstUnknow;
const e_ResultCode e_ResultCode_MAX = eRstSuccess;
const int e_ResultCode_ARRAYSIZE = e_ResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* e_ResultCode_descriptor();
inline const ::std::string& e_ResultCode_Name(e_ResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    e_ResultCode_descriptor(), value);
}
inline bool e_ResultCode_Parse(
    const ::std::string& name, e_ResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<e_ResultCode>(
    e_ResultCode_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace LPDefine

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::LPDefine::e_MsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LPDefine::e_MsgID>() {
  return ::LPDefine::e_MsgID_descriptor();
}
template <> struct is_proto_enum< ::LPDefine::e_ResultCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LPDefine::e_ResultCode>() {
  return ::LPDefine::e_ResultCode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LPDefine_2eproto__INCLUDED
