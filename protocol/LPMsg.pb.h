// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LPMsg.proto

#ifndef PROTOBUF_LPMsg_2eproto__INCLUDED
#define PROTOBUF_LPMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace LPMsg {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_LPMsg_2eproto();
void protobuf_AssignDesc_LPMsg_2eproto();
void protobuf_ShutdownFile_LPMsg_2eproto();

class AckLogin;
class AckRegister;
class GUID;
class ReqLogin;
class ReqRegister;
class TestString;

// ===================================================================

class GUID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LPMsg.GUID) */ {
 public:
  GUID();
  virtual ~GUID();

  GUID(const GUID& from);

  inline GUID& operator=(const GUID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GUID& default_instance();

  void Swap(GUID* other);

  // implements Message ----------------------------------------------

  inline GUID* New() const { return New(NULL); }

  GUID* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GUID& from);
  void MergeFrom(const GUID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GUID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes head = 1;
  bool has_head() const;
  void clear_head();
  static const int kHeadFieldNumber = 1;
  const ::std::string& head() const;
  void set_head(const ::std::string& value);
  void set_head(const char* value);
  void set_head(const void* value, size_t size);
  ::std::string* mutable_head();
  ::std::string* release_head();
  void set_allocated_head(::std::string* head);

  // required bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:LPMsg.GUID)
 private:
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_data();
  inline void clear_has_data();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr head_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  friend void  protobuf_AddDesc_LPMsg_2eproto();
  friend void protobuf_AssignDesc_LPMsg_2eproto();
  friend void protobuf_ShutdownFile_LPMsg_2eproto();

  void InitAsDefaultInstance();
  static GUID* default_instance_;
};
// -------------------------------------------------------------------

class ReqRegister : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LPMsg.ReqRegister) */ {
 public:
  ReqRegister();
  virtual ~ReqRegister();

  ReqRegister(const ReqRegister& from);

  inline ReqRegister& operator=(const ReqRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRegister& default_instance();

  void Swap(ReqRegister* other);

  // implements Message ----------------------------------------------

  inline ReqRegister* New() const { return New(NULL); }

  ReqRegister* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqRegister& from);
  void MergeFrom(const ReqRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqRegister* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 server_id = 1;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  ::google::protobuf::int32 server_id() const;
  void set_server_id(::google::protobuf::int32 value);

  // required string server_name = 2;
  bool has_server_name() const;
  void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // required string message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:LPMsg.ReqRegister)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_message();
  inline void clear_has_message();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 server_id_;
  friend void  protobuf_AddDesc_LPMsg_2eproto();
  friend void protobuf_AssignDesc_LPMsg_2eproto();
  friend void protobuf_ShutdownFile_LPMsg_2eproto();

  void InitAsDefaultInstance();
  static ReqRegister* default_instance_;
};
// -------------------------------------------------------------------

class AckRegister : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LPMsg.AckRegister) */ {
 public:
  AckRegister();
  virtual ~AckRegister();

  AckRegister(const AckRegister& from);

  inline AckRegister& operator=(const AckRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckRegister& default_instance();

  void Swap(AckRegister* other);

  // implements Message ----------------------------------------------

  inline AckRegister* New() const { return New(NULL); }

  AckRegister* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckRegister& from);
  void MergeFrom(const AckRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckRegister* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 server_id = 1;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  ::google::protobuf::int32 server_id() const;
  void set_server_id(::google::protobuf::int32 value);

  // required string server_name = 2;
  bool has_server_name() const;
  void clear_server_name();
  static const int kServerNameFieldNumber = 2;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // required string message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:LPMsg.AckRegister)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_message();
  inline void clear_has_message();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 server_id_;
  friend void  protobuf_AddDesc_LPMsg_2eproto();
  friend void protobuf_AssignDesc_LPMsg_2eproto();
  friend void protobuf_ShutdownFile_LPMsg_2eproto();

  void InitAsDefaultInstance();
  static AckRegister* default_instance_;
};
// -------------------------------------------------------------------

class TestString : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LPMsg.TestString) */ {
 public:
  TestString();
  virtual ~TestString();

  TestString(const TestString& from);

  inline TestString& operator=(const TestString& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestString& default_instance();

  void Swap(TestString* other);

  // implements Message ----------------------------------------------

  inline TestString* New() const { return New(NULL); }

  TestString* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestString& from);
  void MergeFrom(const TestString& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestString* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string str_value1 = 1;
  bool has_str_value1() const;
  void clear_str_value1();
  static const int kStrValue1FieldNumber = 1;
  const ::std::string& str_value1() const;
  void set_str_value1(const ::std::string& value);
  void set_str_value1(const char* value);
  void set_str_value1(const char* value, size_t size);
  ::std::string* mutable_str_value1();
  ::std::string* release_str_value1();
  void set_allocated_str_value1(::std::string* str_value1);

  // required int32 num_value1 = 2;
  bool has_num_value1() const;
  void clear_num_value1();
  static const int kNumValue1FieldNumber = 2;
  ::google::protobuf::int32 num_value1() const;
  void set_num_value1(::google::protobuf::int32 value);

  // required int32 num_value2 = 3;
  bool has_num_value2() const;
  void clear_num_value2();
  static const int kNumValue2FieldNumber = 3;
  ::google::protobuf::int32 num_value2() const;
  void set_num_value2(::google::protobuf::int32 value);

  // required int32 num_value3 = 4;
  bool has_num_value3() const;
  void clear_num_value3();
  static const int kNumValue3FieldNumber = 4;
  ::google::protobuf::int32 num_value3() const;
  void set_num_value3(::google::protobuf::int32 value);

  // required string str_value2 = 5;
  bool has_str_value2() const;
  void clear_str_value2();
  static const int kStrValue2FieldNumber = 5;
  const ::std::string& str_value2() const;
  void set_str_value2(const ::std::string& value);
  void set_str_value2(const char* value);
  void set_str_value2(const char* value, size_t size);
  ::std::string* mutable_str_value2();
  ::std::string* release_str_value2();
  void set_allocated_str_value2(::std::string* str_value2);

  // @@protoc_insertion_point(class_scope:LPMsg.TestString)
 private:
  inline void set_has_str_value1();
  inline void clear_has_str_value1();
  inline void set_has_num_value1();
  inline void clear_has_num_value1();
  inline void set_has_num_value2();
  inline void clear_has_num_value2();
  inline void set_has_num_value3();
  inline void clear_has_num_value3();
  inline void set_has_str_value2();
  inline void clear_has_str_value2();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr str_value1_;
  ::google::protobuf::int32 num_value1_;
  ::google::protobuf::int32 num_value2_;
  ::google::protobuf::internal::ArenaStringPtr str_value2_;
  ::google::protobuf::int32 num_value3_;
  friend void  protobuf_AddDesc_LPMsg_2eproto();
  friend void protobuf_AssignDesc_LPMsg_2eproto();
  friend void protobuf_ShutdownFile_LPMsg_2eproto();

  void InitAsDefaultInstance();
  static TestString* default_instance_;
};
// -------------------------------------------------------------------

class ReqLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LPMsg.ReqLogin) */ {
 public:
  ReqLogin();
  virtual ~ReqLogin();

  ReqLogin(const ReqLogin& from);

  inline ReqLogin& operator=(const ReqLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqLogin& default_instance();

  void Swap(ReqLogin* other);

  // implements Message ----------------------------------------------

  inline ReqLogin* New() const { return New(NULL); }

  ReqLogin* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqLogin& from);
  void MergeFrom(const ReqLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReqLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // required string password = 2;
  bool has_password() const;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:LPMsg.ReqLogin)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_password();
  inline void clear_has_password();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  friend void  protobuf_AddDesc_LPMsg_2eproto();
  friend void protobuf_AssignDesc_LPMsg_2eproto();
  friend void protobuf_ShutdownFile_LPMsg_2eproto();

  void InitAsDefaultInstance();
  static ReqLogin* default_instance_;
};
// -------------------------------------------------------------------

class AckLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:LPMsg.AckLogin) */ {
 public:
  AckLogin();
  virtual ~AckLogin();

  AckLogin(const AckLogin& from);

  inline AckLogin& operator=(const AckLogin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckLogin& default_instance();

  void Swap(AckLogin* other);

  // implements Message ----------------------------------------------

  inline AckLogin* New() const { return New(NULL); }

  AckLogin* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckLogin& from);
  void MergeFrom(const AckLogin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AckLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account = 1;
  bool has_account() const;
  void clear_account();
  static const int kAccountFieldNumber = 1;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // required int32 error_code = 2;
  bool has_error_code() const;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // required string message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:LPMsg.AckLogin)
 private:
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_message();
  inline void clear_has_message();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::int32 error_code_;
  friend void  protobuf_AddDesc_LPMsg_2eproto();
  friend void protobuf_AssignDesc_LPMsg_2eproto();
  friend void protobuf_ShutdownFile_LPMsg_2eproto();

  void InitAsDefaultInstance();
  static AckLogin* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GUID

// required bytes head = 1;
inline bool GUID::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GUID::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GUID::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GUID::clear_head() {
  head_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_head();
}
inline const ::std::string& GUID::head() const {
  // @@protoc_insertion_point(field_get:LPMsg.GUID.head)
  return head_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GUID::set_head(const ::std::string& value) {
  set_has_head();
  head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.GUID.head)
}
inline void GUID::set_head(const char* value) {
  set_has_head();
  head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.GUID.head)
}
inline void GUID::set_head(const void* value, size_t size) {
  set_has_head();
  head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.GUID.head)
}
inline ::std::string* GUID::mutable_head() {
  set_has_head();
  // @@protoc_insertion_point(field_mutable:LPMsg.GUID.head)
  return head_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GUID::release_head() {
  // @@protoc_insertion_point(field_release:LPMsg.GUID.head)
  clear_has_head();
  return head_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GUID::set_allocated_head(::std::string* head) {
  if (head != NULL) {
    set_has_head();
  } else {
    clear_has_head();
  }
  head_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), head);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.GUID.head)
}

// required bytes data = 2;
inline bool GUID::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GUID::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GUID::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GUID::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& GUID::data() const {
  // @@protoc_insertion_point(field_get:LPMsg.GUID.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GUID::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.GUID.data)
}
inline void GUID::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.GUID.data)
}
inline void GUID::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.GUID.data)
}
inline ::std::string* GUID::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:LPMsg.GUID.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GUID::release_data() {
  // @@protoc_insertion_point(field_release:LPMsg.GUID.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GUID::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.GUID.data)
}

// -------------------------------------------------------------------

// ReqRegister

// required int32 server_id = 1;
inline bool ReqRegister::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqRegister::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqRegister::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqRegister::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 ReqRegister::server_id() const {
  // @@protoc_insertion_point(field_get:LPMsg.ReqRegister.server_id)
  return server_id_;
}
inline void ReqRegister::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:LPMsg.ReqRegister.server_id)
}

// required string server_name = 2;
inline bool ReqRegister::has_server_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqRegister::set_has_server_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqRegister::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqRegister::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_name();
}
inline const ::std::string& ReqRegister::server_name() const {
  // @@protoc_insertion_point(field_get:LPMsg.ReqRegister.server_name)
  return server_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRegister::set_server_name(const ::std::string& value) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.ReqRegister.server_name)
}
inline void ReqRegister::set_server_name(const char* value) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.ReqRegister.server_name)
}
inline void ReqRegister::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.ReqRegister.server_name)
}
inline ::std::string* ReqRegister::mutable_server_name() {
  set_has_server_name();
  // @@protoc_insertion_point(field_mutable:LPMsg.ReqRegister.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqRegister::release_server_name() {
  // @@protoc_insertion_point(field_release:LPMsg.ReqRegister.server_name)
  clear_has_server_name();
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRegister::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    set_has_server_name();
  } else {
    clear_has_server_name();
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.ReqRegister.server_name)
}

// required string message = 3;
inline bool ReqRegister::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqRegister::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqRegister::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqRegister::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& ReqRegister::message() const {
  // @@protoc_insertion_point(field_get:LPMsg.ReqRegister.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRegister::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.ReqRegister.message)
}
inline void ReqRegister::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.ReqRegister.message)
}
inline void ReqRegister::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.ReqRegister.message)
}
inline ::std::string* ReqRegister::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:LPMsg.ReqRegister.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqRegister::release_message() {
  // @@protoc_insertion_point(field_release:LPMsg.ReqRegister.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqRegister::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.ReqRegister.message)
}

// -------------------------------------------------------------------

// AckRegister

// required int32 server_id = 1;
inline bool AckRegister::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckRegister::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckRegister::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckRegister::clear_server_id() {
  server_id_ = 0;
  clear_has_server_id();
}
inline ::google::protobuf::int32 AckRegister::server_id() const {
  // @@protoc_insertion_point(field_get:LPMsg.AckRegister.server_id)
  return server_id_;
}
inline void AckRegister::set_server_id(::google::protobuf::int32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:LPMsg.AckRegister.server_id)
}

// required string server_name = 2;
inline bool AckRegister::has_server_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckRegister::set_has_server_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckRegister::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckRegister::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_name();
}
inline const ::std::string& AckRegister::server_name() const {
  // @@protoc_insertion_point(field_get:LPMsg.AckRegister.server_name)
  return server_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckRegister::set_server_name(const ::std::string& value) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.AckRegister.server_name)
}
inline void AckRegister::set_server_name(const char* value) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.AckRegister.server_name)
}
inline void AckRegister::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.AckRegister.server_name)
}
inline ::std::string* AckRegister::mutable_server_name() {
  set_has_server_name();
  // @@protoc_insertion_point(field_mutable:LPMsg.AckRegister.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckRegister::release_server_name() {
  // @@protoc_insertion_point(field_release:LPMsg.AckRegister.server_name)
  clear_has_server_name();
  return server_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckRegister::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    set_has_server_name();
  } else {
    clear_has_server_name();
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.AckRegister.server_name)
}

// required string message = 3;
inline bool AckRegister::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckRegister::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckRegister::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckRegister::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& AckRegister::message() const {
  // @@protoc_insertion_point(field_get:LPMsg.AckRegister.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckRegister::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.AckRegister.message)
}
inline void AckRegister::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.AckRegister.message)
}
inline void AckRegister::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.AckRegister.message)
}
inline ::std::string* AckRegister::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:LPMsg.AckRegister.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckRegister::release_message() {
  // @@protoc_insertion_point(field_release:LPMsg.AckRegister.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckRegister::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.AckRegister.message)
}

// -------------------------------------------------------------------

// TestString

// required string str_value1 = 1;
inline bool TestString::has_str_value1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestString::set_has_str_value1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestString::clear_has_str_value1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestString::clear_str_value1() {
  str_value1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str_value1();
}
inline const ::std::string& TestString::str_value1() const {
  // @@protoc_insertion_point(field_get:LPMsg.TestString.str_value1)
  return str_value1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestString::set_str_value1(const ::std::string& value) {
  set_has_str_value1();
  str_value1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.TestString.str_value1)
}
inline void TestString::set_str_value1(const char* value) {
  set_has_str_value1();
  str_value1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.TestString.str_value1)
}
inline void TestString::set_str_value1(const char* value, size_t size) {
  set_has_str_value1();
  str_value1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.TestString.str_value1)
}
inline ::std::string* TestString::mutable_str_value1() {
  set_has_str_value1();
  // @@protoc_insertion_point(field_mutable:LPMsg.TestString.str_value1)
  return str_value1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestString::release_str_value1() {
  // @@protoc_insertion_point(field_release:LPMsg.TestString.str_value1)
  clear_has_str_value1();
  return str_value1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestString::set_allocated_str_value1(::std::string* str_value1) {
  if (str_value1 != NULL) {
    set_has_str_value1();
  } else {
    clear_has_str_value1();
  }
  str_value1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_value1);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.TestString.str_value1)
}

// required int32 num_value1 = 2;
inline bool TestString::has_num_value1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestString::set_has_num_value1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestString::clear_has_num_value1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestString::clear_num_value1() {
  num_value1_ = 0;
  clear_has_num_value1();
}
inline ::google::protobuf::int32 TestString::num_value1() const {
  // @@protoc_insertion_point(field_get:LPMsg.TestString.num_value1)
  return num_value1_;
}
inline void TestString::set_num_value1(::google::protobuf::int32 value) {
  set_has_num_value1();
  num_value1_ = value;
  // @@protoc_insertion_point(field_set:LPMsg.TestString.num_value1)
}

// required int32 num_value2 = 3;
inline bool TestString::has_num_value2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TestString::set_has_num_value2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TestString::clear_has_num_value2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TestString::clear_num_value2() {
  num_value2_ = 0;
  clear_has_num_value2();
}
inline ::google::protobuf::int32 TestString::num_value2() const {
  // @@protoc_insertion_point(field_get:LPMsg.TestString.num_value2)
  return num_value2_;
}
inline void TestString::set_num_value2(::google::protobuf::int32 value) {
  set_has_num_value2();
  num_value2_ = value;
  // @@protoc_insertion_point(field_set:LPMsg.TestString.num_value2)
}

// required int32 num_value3 = 4;
inline bool TestString::has_num_value3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TestString::set_has_num_value3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TestString::clear_has_num_value3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TestString::clear_num_value3() {
  num_value3_ = 0;
  clear_has_num_value3();
}
inline ::google::protobuf::int32 TestString::num_value3() const {
  // @@protoc_insertion_point(field_get:LPMsg.TestString.num_value3)
  return num_value3_;
}
inline void TestString::set_num_value3(::google::protobuf::int32 value) {
  set_has_num_value3();
  num_value3_ = value;
  // @@protoc_insertion_point(field_set:LPMsg.TestString.num_value3)
}

// required string str_value2 = 5;
inline bool TestString::has_str_value2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TestString::set_has_str_value2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TestString::clear_has_str_value2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TestString::clear_str_value2() {
  str_value2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_str_value2();
}
inline const ::std::string& TestString::str_value2() const {
  // @@protoc_insertion_point(field_get:LPMsg.TestString.str_value2)
  return str_value2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestString::set_str_value2(const ::std::string& value) {
  set_has_str_value2();
  str_value2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.TestString.str_value2)
}
inline void TestString::set_str_value2(const char* value) {
  set_has_str_value2();
  str_value2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.TestString.str_value2)
}
inline void TestString::set_str_value2(const char* value, size_t size) {
  set_has_str_value2();
  str_value2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.TestString.str_value2)
}
inline ::std::string* TestString::mutable_str_value2() {
  set_has_str_value2();
  // @@protoc_insertion_point(field_mutable:LPMsg.TestString.str_value2)
  return str_value2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TestString::release_str_value2() {
  // @@protoc_insertion_point(field_release:LPMsg.TestString.str_value2)
  clear_has_str_value2();
  return str_value2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TestString::set_allocated_str_value2(::std::string* str_value2) {
  if (str_value2 != NULL) {
    set_has_str_value2();
  } else {
    clear_has_str_value2();
  }
  str_value2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str_value2);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.TestString.str_value2)
}

// -------------------------------------------------------------------

// ReqLogin

// required string account = 1;
inline bool ReqLogin::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqLogin::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqLogin::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqLogin::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& ReqLogin::account() const {
  // @@protoc_insertion_point(field_get:LPMsg.ReqLogin.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqLogin::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.ReqLogin.account)
}
inline void ReqLogin::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.ReqLogin.account)
}
inline void ReqLogin::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.ReqLogin.account)
}
inline ::std::string* ReqLogin::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:LPMsg.ReqLogin.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqLogin::release_account() {
  // @@protoc_insertion_point(field_release:LPMsg.ReqLogin.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqLogin::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.ReqLogin.account)
}

// required string password = 2;
inline bool ReqLogin::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqLogin::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqLogin::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqLogin::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
inline const ::std::string& ReqLogin::password() const {
  // @@protoc_insertion_point(field_get:LPMsg.ReqLogin.password)
  return password_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqLogin::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.ReqLogin.password)
}
inline void ReqLogin::set_password(const char* value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.ReqLogin.password)
}
inline void ReqLogin::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.ReqLogin.password)
}
inline ::std::string* ReqLogin::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:LPMsg.ReqLogin.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqLogin::release_password() {
  // @@protoc_insertion_point(field_release:LPMsg.ReqLogin.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqLogin::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.ReqLogin.password)
}

// -------------------------------------------------------------------

// AckLogin

// required string account = 1;
inline bool AckLogin::has_account() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckLogin::set_has_account() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckLogin::clear_has_account() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckLogin::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account();
}
inline const ::std::string& AckLogin::account() const {
  // @@protoc_insertion_point(field_get:LPMsg.AckLogin.account)
  return account_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckLogin::set_account(const ::std::string& value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.AckLogin.account)
}
inline void AckLogin::set_account(const char* value) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.AckLogin.account)
}
inline void AckLogin::set_account(const char* value, size_t size) {
  set_has_account();
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.AckLogin.account)
}
inline ::std::string* AckLogin::mutable_account() {
  set_has_account();
  // @@protoc_insertion_point(field_mutable:LPMsg.AckLogin.account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckLogin::release_account() {
  // @@protoc_insertion_point(field_release:LPMsg.AckLogin.account)
  clear_has_account();
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckLogin::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    set_has_account();
  } else {
    clear_has_account();
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.AckLogin.account)
}

// required int32 error_code = 2;
inline bool AckLogin::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckLogin::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckLogin::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckLogin::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 AckLogin::error_code() const {
  // @@protoc_insertion_point(field_get:LPMsg.AckLogin.error_code)
  return error_code_;
}
inline void AckLogin::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:LPMsg.AckLogin.error_code)
}

// required string message = 3;
inline bool AckLogin::has_message() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AckLogin::set_has_message() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AckLogin::clear_has_message() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AckLogin::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& AckLogin::message() const {
  // @@protoc_insertion_point(field_get:LPMsg.AckLogin.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckLogin::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LPMsg.AckLogin.message)
}
inline void AckLogin::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LPMsg.AckLogin.message)
}
inline void AckLogin::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LPMsg.AckLogin.message)
}
inline ::std::string* AckLogin::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:LPMsg.AckLogin.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AckLogin::release_message() {
  // @@protoc_insertion_point(field_release:LPMsg.AckLogin.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AckLogin::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:LPMsg.AckLogin.message)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LPMsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LPMsg_2eproto__INCLUDED
